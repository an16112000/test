[{"/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/index.js":"1","/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/reportWebVitals.js":"2","/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/App.js":"3","/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/QuerryFunction.js":"4"},{"size":531,"mtime":1690103615431,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1689258698218,"results":"7","hashOfConfig":"6"},{"size":665,"mtime":1690104124447,"results":"8","hashOfConfig":"6"},{"size":729,"mtime":1691209885123,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cxqyfg",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/index.js",[],[],"/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/reportWebVitals.js",[],[],[],"/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/App.js",["25"],[],"import QuerryFunction from './QuerryFunction';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const [history, setHistory] = useState([{data: 1}])\n  let count = 1;\n  console.log(count);\n  console.log(history);\n  return (\n    <div>\n      <button \n      onClick={()=>setHistory(prev => {\n        const newHistory = [...prev];\n        newHistory.splice(prev.length-1,1)\n        return newHistory;\n        })}>Remove here</button>\n      <button onClick={()=>setHistory(prev => {\n        count++\n        const newHistory = [...prev, {data: count}];\n        return newHistory;\n      })}>Add here</button>\n    </div>\n  );\n}\n\n\nexport default App;\n","/Users/doandinhan/Documents/workspace/ReactTest/withoutclassnames/src/QuerryFunction.js",["26","27"],[],"import React, { useEffect, useState } from 'react';\n\nfunction QuerryFunction({ onClick, children }) {\n    const [count, setCount] = useState(0);\n    const [text, setText] = useState('');\n    const [array, setArray] = useState([]);\n    let temp;\n    useEffect(\n        () => {\n            temp = array.map(\n                () => setCount(prev => prev + 1)\n            );\n            return temp;\n\n        }, [array]\n    )\n\n    return (\n        <div>\n            <input value={text} onChange={(e) => setText(e.target.value)} />\n            <button\n                onClick={() => setArray(prev => [...prev, temp])}\n            >\n                Click Here!\n            </button>\n        </div>\n    )\n}\n\nexport default QuerryFunction",{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":22},{"ruleId":"28","severity":1,"message":"32","line":4,"column":12,"nodeType":"30","messageId":"31","endLine":4,"endColumn":17},{"ruleId":"33","severity":1,"message":"34","line":10,"column":20,"nodeType":"35","endLine":12,"endColumn":14},"no-unused-vars","'QuerryFunction' is defined but never used.","Identifier","unusedVar","'count' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'temp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression"]